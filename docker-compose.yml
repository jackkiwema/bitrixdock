volumes:
  db:
    driver: local
  cache:
    driver: local

networks:
  bitrixdock:

services:
  certbot:
    image: adferrand/dnsrobocert
    hostname: certbot
    container_name: certbot
    volumes:
      - ./private/letsencrypt:/etc/letsencrypt
      # needed for nginx container autorestart, https://dnsrobocert.readthedocs.io/en/latest/configuration_reference.html#autorestart
      - /var/run/docker.sock:/var/run/docker.sock
      # should be in the following format:
      # https://dnsrobocert.readthedocs.io/en/latest/user_guide.html#configuration
      - ./ssl/dnsrobocert.yml:/etc/dnsrobocert/config.yml

    # For yandexcloud:
    # AUTH_KEY must be provided, short-lived and set by scripts/update-dns-token.sh
    # DNS_ZONE_ID from https://console.cloud.yandex.com/link/dns or
    # CLOUD_ID, FOLDER_ID from https://console.cloud.yandex.com/cloud can be provided
    env_file: .env
    # used in config/dnsrobocert.yml
    environment:
      - PROVIDER=./${PROVIDER}
      - EMAIL=./${EMAIL}
      - DOMAIN=./${DOMAIN}

    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"

    restart: unless-stopped
  
  php:
    build: ./${PHP_VERSION}
    container_name: php
    volumes_from:
      - source
    links:
      - db
      - memcached
    environment:
      - TZ=Africa/Nairobi
    stdin_open: true
    tty: true
    networks:
      - bitrixdock
    restart: unless-stopped
  web_server:
    build: ./${WEB_SERVER_TYPE}
    container_name: web_server
    depends_on:
      - source
    volumes_from:
      - source
    ports:
      - '${INTERFACE}:80:80'
      - '${INTERFACE}:443:443'
    links:
      - php
    networks:
      - bitrixdock
    environment:
      - TZ=Europe/Moscow
    stdin_open: true
    tty: true
    restart: unless-stopped
  db:
    build: ./${DB_SERVER_TYPE}
    container_name: db
    volumes:
      - ./${DB_SERVER_TYPE}/init:/docker-entrypoint-initdb.d
    volumes_from:
      - source
    ports:
      - '${INTERFACE}:3306:3306'
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      TZ: Europe/Moscow
    command: mysqld --user=root --sql-mode=""
    networks:
      - bitrixdock
    stdin_open: true
    tty: true
    restart: unless-stopped
  memcached:
    image: memcached:latest
    container_name: memcached
    volumes_from:
      - source
    ports:
      - '${INTERFACE}:11211:11211'
    networks:
      - bitrixdock
    environment:
      - TZ=Europe/Moscow
    stdin_open: true
    tty: true
    restart: unless-stopped
  adminer:
    image: dockette/adminer:full
    container_name: adminer
    links:
      - db:db
    ports:
      - '${INTERFACE}:8080:80'
    environment:
      UPLOAD: 1024M # upload_max_filesize, post_max_size
      TZ: Europe/Moscow
    restart: unless-stopped
    stdin_open: true
    tty: true
    networks:
      - bitrixdock
  source:
    image: alpine:latest
    container_name: source
    volumes:
      - ./logs/${WEB_SERVER_TYPE}:/var/log/${WEB_SERVER_TYPE}
      - ./logs/php:/var/log/php
      - ./logs/db:/var/log/mysql
      - ./logs/memcached:/var/log/memcached
      - db:/var/lib/mysql
      - cache:/var/lib/memcached
      - ${SITE_PATH}:/var/www/bitrix
      - /etc/localtime:/etc/localtime/:ro
    networks:
      - bitrixdock
